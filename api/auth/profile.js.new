import { findUserById, updateUser } from '../utils/db.js';
import { verifyToken } from '../utils/auth.js';

export default async (req, res) => {
  // Verificar se o método é válido
  if (req.method !== 'GET' && req.method !== 'PUT') {
    return res.status(405).json({ error: 'Método não permitido' });
  }

  // Verificar autenticação
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: 'Token não fornecido' });
  }

  try {
    // Verificar e decodificar o token
    const decoded = verifyToken(token);
    
    if (!decoded || !decoded.userId) {
      return res.status(401).json({ error: 'Token inválido' });
    }

    // Buscar usuário pelo ID
    const user = findUserById(decoded.userId);
    
    if (!user) {
      return res.status(404).json({ error: 'Usuário não encontrado' });
    }

    // GET - Retornar perfil do usuário
    if (req.method === 'GET') {
      return res.status(200).json({
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role,
          photo: user.photo
        }
      });
    }

    // PUT - Atualizar perfil do usuário
    if (req.method === 'PUT') {
      const { name, email, password, photo } = req.body;
      
      // Validar dados
      if (!name && !email && !password && !photo) {
        return res.status(400).json({ error: 'Nenhum dado fornecido para atualização' });
      }

      // Verificar se o email já está em uso por outro usuário
      if (email && email !== user.email) {
        const existingUser = findUserByEmail(email);
        if (existingUser && existingUser.id !== user.id) {
          return res.status(400).json({ error: 'Este email já está em uso' });
        }
      }

      // Preparar dados para atualização
      const updateData = {};
      if (name) updateData.name = name;
      if (email) updateData.email = email;
      if (password) updateData.password = password;
      if (photo !== undefined) updateData.photo = photo;

      // Atualizar usuário
      const updatedUser = updateUser(user.id, updateData);
      
      if (!updatedUser) {
        return res.status(500).json({ error: 'Erro ao atualizar perfil' });
      }

      return res.status(200).json({
        user: {
          id: updatedUser.id,
          name: updatedUser.name,
          email: updatedUser.email,
          role: updatedUser.role,
          photo: updatedUser.photo
        }
      });
    }
  } catch (error) {
    console.error('Erro ao processar perfil:', error);
    return res.status(500).json({ error: 'Erro interno do servidor' });
  }
};
